/**	Copyright (c) 2007-2008 Ayan Ray | http://www.ayanray.com**	Permission is hereby granted, free of charge, to any person obtaining a copy*	of this software and associated documentation files (the "Software"), to deal*	in the Software without restriction, including without limitation the rights*	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell*	copies of the Software, and to permit persons to whom the Software is*	furnished to do so, subject to the following conditions:**	The above copyright notice and this permission notice shall be included in*	all copies or substantial portions of the Software.**	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE*	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN*	THE SOFTWARE.**/package com.ayanray.loaders.handlers{	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.system.*;	import flash.utils.*;		import com.ayanray.loaders.handlers.ILoader;	import com.ayanray.loaders.AssetLoaderSettings;	/**	* Base Loader is an abstract base class that will do nothing if you try to instantiate it. 	* It has many useful methods that are common between different loaders. When creating your own	* loader, you do not need to extend this class. However, you will always be required to implement ILoader.	*/	public class BaseLoader implements ILoader	{		/**		* Internal Loader Object		*/		public var loaderObj:*;		/**		* User Defined functions and extra variable for all functions involved in loading Assets		*/		public var settings:Object;		/**		* User Defined Variables to pass along the loader object		*/		public var extra:Object;		/**		* Internal Timeout Function		*/		public var timeout:uint;		/**		* Reference to the IEventDispatcher that the listeners are assigned to		*/		public var listenersObj:IEventDispatcher;		/**		* @ignore		*/		public function BaseLoader() :void {}		/**		* Called when the Loader begins downloading of the asset		*/				public function onStart ( e:Event ) :void		{			if(settings.onStart != undefined)				settings.onStart({event:e, extra:this.extra});		}		/**		* Called when the asset is finished downloading. It also makes the AssetLoader move on to the next queue if queue is used		*		* @param e The dispatched complete Event		*/		private function _onComplete( e:Event )	:void 		{						updateQueue();						this.onComplete( e );						this.clear();        }				/**		* Handles the output data and casts it to bitmap, sound, video, XML, etc.		*/		public function onComplete ( e:Event ) : void		{			if(settings.onComplete != undefined)				settings.onComplete( { asset: this.loaderObj, extra: this.extra} );		}		/**		* Called when the timeout interval is reached and the download has not completed.		*/		public function onTimeout ( ) :void		{			// Update Queue			settings.updateQueue( this.extra ) ;						this.stop();		}		/**		* This function is called whenever any error is encountered. This makes it easy for error handling so that you can use cases		* to find out what kind of error it is and how to react. You also can use the advanced error handling, but note that this function		* will no longer be called for that specific function. Example: if you add in the settings a function for "onIOError", regularly		* "onError" would be called with the error. However, since you have specified a custom "onIOError", "onError" will no longer be called.		*/		public function onError ( e:* ) :void		{			updateQueue();						if (settings.onError != undefined) settings.onError( { error: e, e: e, extra: this.extra } );						this.clear();		}		/**		* Called whenever a progress event is received. This can be used to track the download progress of a file		*/		public function onUpdate( e:ProgressEvent ):void		{			if(settings.onUpdate != undefined)				settings.onUpdate( { event:e, e:e, extra:this.extra } );        }				protected function updateQueue () :void		{			// Update Queue			settings.updateQueue( this.extra ) ;		}		/**		* Aborts Current Loader, if it is not already completed or started		*/		public function stop()	:void		{			if(this.loaderObj == null) return;						try 			{        		loaderObj.close();				clear();				return;    		} 			catch (e:Error) 			{				// Loader hasn't started so much catch the error								// TODO: Handle the error			}						return;		}		/**		* Clears all variables and listeners		*/		public function clear() :void		{				/* gskinner's hack to fix loader memory leak  */			/*try {			   new LocalConnection().connect('bar');			   new LocalConnection().connect('bar');			} catch (e:*) {}			*/						// Clear Everything Else            stopListeners(listenersObj);			this.settings = null;			this.extra = null;			this.loaderObj = null;						// Clear Timeout			clearTimeout( this.timeout );		}				/*		* ------------------------------------------------------------------------------ Advanced Event Handlers		*/				/**		* An HTTP Status event is an event that is dispatched before errors and completion events for all HTTP requests.		* This may or may not be an error and is thus optional.		*		* For more details about HTTP Status Event, please view: 		* http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/events/HTTPStatusEvent.html		*/        public function onHTTPStatus ( e:HTTPStatusEvent ) :void 		{			if(settings.onHTTPStatus != undefined)				settings.onHTTPStatus( {event:e, extra:this.extra} );        }		/**		* An IOError occurs if the URL does not exist but the domain does resolve (no timeout).		*/        public function onIOError( e:IOErrorEvent ):void		{			if(settings.onIOError != undefined)				settings.onIOError({event:e, extra:this.extra});			else			{				onError( e );				if(AssetLoaderSettings.DEBUG > 0) throw new Error("ASSETLOADER: I can't find the URL you are loading. Here is the error: '" + e.text + "'.");			}        }		       				/*		* ------------------------------------------------------------------------------ Configuration		*/		public function startListeners( dispatcher:IEventDispatcher ) :void 		{						dispatcher.addEventListener(Event.OPEN, 						onStart);			dispatcher.addEventListener(Event.COMPLETE, 					_onComplete);			dispatcher.addEventListener(ProgressEvent.PROGRESS,				onUpdate);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, 		onHTTPStatus);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, 				onIOError);        }		public function stopListeners( dispatcher:IEventDispatcher ) :void 		{			dispatcher.removeEventListener(Event.OPEN, 						onStart);            dispatcher.removeEventListener(Event.COMPLETE, 					_onComplete);			dispatcher.removeEventListener(ProgressEvent.PROGRESS, 			onUpdate);            dispatcher.removeEventListener(HTTPStatusEvent.HTTP_STATUS, 	onHTTPStatus);            dispatcher.removeEventListener(IOErrorEvent.IO_ERROR, 			onIOError);        }	}}