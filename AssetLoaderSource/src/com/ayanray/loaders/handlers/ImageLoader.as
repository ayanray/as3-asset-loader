/**	Copyright (c) 2007-2008 Ayan Ray | http://www.ayanray.com**	Permission is hereby granted, free of charge, to any person obtaining a copy*	of this software and associated documentation files (the "Software"), to deal*	in the Software without restriction, including without limitation the rights*	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell*	copies of the Software, and to permit persons to whom the Software is*	furnished to do so, subject to the following conditions:**	The above copyright notice and this permission notice shall be included in*	all copies or substantial portions of the Software.**	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE*	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN*	THE SOFTWARE.**/package com.ayanray.loaders.handlers{	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.system.*;	import flash.utils.*;		import com.ayanray.loaders.handlers.BaseLoader;	import com.ayanray.loaders.AssetLoaderSettings;	/**	* The Image Loader loads PNGs, GIFS (static), JPEGS, and SWFS.	*	* Custom Settings for the ImageLoader: 	* ------------------------------------	* checkPolicyFile : Allows the loader to check if there is a crossdomain.xml policy before loading the URL	* In order to access the bitmap.data from a URL different from where the SWF is hosted, you must set checkPolicyFile = true.	* 	* applicationDomain : The application domain in which to load the SWF (only useful for SWFs).	*	* securityDomain : The security domain in which to load the SWF (only useful for SWFs).	*/	public class ImageLoader extends BaseLoader	{			/**		* Requires URL and Settings with onComplete, everything else is optional		*		* @param url The URL of the image to load		* @param settings 		* 		*/		function ImageLoader( url:String, settings:Object ) :void		{			this.settings = settings;			this.extra = (this.settings.extra != undefined) ? this.settings.extra : new Object();						// Configuration			this.loaderObj = new Loader();			this.listenersObj = this.loaderObj.contentLoaderInfo;			            this.startListeners( this.listenersObj );						// Set Timeout			if(AssetLoaderSettings.TIMEOUT != 0) timeout = setTimeout( onTimeout , AssetLoaderSettings.TIMEOUT);						var request:URLRequest = new URLRequest(url);						// Start Loader			try 			{				if ( settings.checkPolicyFile != undefined || settings.applicationDomain != undefined || settings.securityDomain != undefined )            			this.loaderObj.load(request, new LoaderContext( settings.checkPolicyFile || false, settings.applicationDomain || null, settings.securityDomain || null));				else					this.loaderObj.load(request);			} 			catch ( e:SecurityError )			{				this.onError( e );			}		}		/**		* An Init Event occurs when the "properties and methods of a loaded SWF file are accessible"		*		* For more information, please read:		* http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/LoaderInfo.html#event:init        */		public function onInit( e:Event ):void		{           if(settings.onInit != undefined)				settings.onInit({event:e, extra:this.extra});        }		/**		* An unload event is dispatched when the loaderObj.unload() is called.		*		* For more information, please read:		* http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/LoaderInfo.html#event:unload        */		public function onUnload( e:Event ):void		{           if(settings.onUnload != undefined)				settings.onUnload({event:e, extra:this.extra});        }				public override function startListeners( dispatcher:IEventDispatcher ) :void 		{			super.startListeners( dispatcher );						// Custom			dispatcher.addEventListener(Event.INIT, 						onInit);			dispatcher.addEventListener(Event.UNLOAD, 						onUnload);		}		public override function stopListeners( dispatcher:IEventDispatcher ) :void 		{			super.stopListeners( dispatcher );						// Custom			dispatcher.removeEventListener(Event.INIT, 						onInit);			dispatcher.removeEventListener(Event.UNLOAD, 					onUnload);		}	}}