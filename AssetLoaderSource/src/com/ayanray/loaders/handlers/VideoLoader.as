/**	Copyright (c) 2007-2008 Ayan Ray | http://www.ayanray.com**	Permission is hereby granted, free of charge, to any person obtaining a copy*	of this software and associated documentation files (the "Software"), to deal*	in the Software without restriction, including without limitation the rights*	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell*	copies of the Software, and to permit persons to whom the Software is*	furnished to do so, subject to the following conditions:**	The above copyright notice and this permission notice shall be included in*	all copies or substantial portions of the Software.**	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE*	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN*	THE SOFTWARE.**/package com.ayanray.loaders.handlers{	import com.ayanray.loaders.AssetLoaderSettings;		import flash.display.*;	import flash.errors.MemoryError;	import flash.events.*;	import flash.media.Video;	import flash.net.*;	import flash.system.*;	import flash.utils.*;	/**	* The Video Loader loads FLVs ....	*	* Custom Settings/Bound Function for the Sound Loader Class: 	* ------------------------------------	* checkPolicyFile : Allows the loader to check if there is a crossdomain.xml policy before loading the URL	* In order to access the bitmap.data from a URL different from where the SWF is hosted, you must set checkPolicyFile = true.	* 	* bufferTime : Sets the buffer time for loading the sound (allowing playback)	* 	* onID3({event, extra}): Sends the ID3 information for the sound once it is ready	* 	* onInit({event, sound, extra}) : If you are streaming the sound, or want to play it instantly, you can get the sound instantly	*/	public class VideoLoader extends BaseLoader	{			private var netConnection:NetConnection;		private var netStream:NetStream;		private var video:Video;				private var videoURL:String = "";		/**		* Requires URL and Settings with onComplete, everything else is optional		*		* @param url The URL of the image to load		* @param settings 		* 		* 		*/		function VideoLoader( url:String, settings:Object ) :void		{			this.videoURL = url;			this.settings = settings;			this.extra = (this.settings.extra != undefined) ? this.settings.extra : new Object();						// Configuration			this.loaderObj = new URLLoader();			this.listenersObj = this.loaderObj;						this.startListeners( this.listenersObj );						// Set Timeout			if(AssetLoaderSettings.TIMEOUT != 0) timeout = setTimeout( onTimeout , AssetLoaderSettings.TIMEOUT );						var request:URLRequest = new URLRequest(url);						try            {				loaderObj.load(request);            }						// All Error Cases			catch (e:ArgumentError)			{				this.onError( e );			}			catch (e:MemoryError)			{				this.onError( e );			}			catch (e:TypeError)			{				this.onError( e );			}            catch (e:SecurityError)            {              	this.onError( e );            }								// Configuration			netConnection = new NetConnection(); 			netConnection.connect(null);						// Net Stream -> Start loading video			netStream = new NetStream(netConnection); 			netStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); 						var customClient:Object = new Object();			customClient.onMetaData = function(infoObj:Object):void { 				if(settings.onMetaData != null) 					settings.onMetaData({extra: this.extra, metaData: infoObj}); 			}; 						customClient.onCuePoint = function(infoObj:Object):void { 				if(settings.onCuePoint != null) 					settings.onCuePoint({extra: this.extra, cuePoint: infoObj}); 			}; 						netStream.client = customClient;						// Start Loader			try 			{				netStream.play(url);			} 			catch ( e:SecurityError )			{				this.onError( e );			}						// With Video, there are no complete events as the video is played progressively.			// As a current Hack, let's make the video object and send the oncomplete notice now.						video = new Video();			video.attachNetStream(netStream);						// Update Queue			updateQueue();						// Return OnComplete Status			if(settings.onComplete != undefined)				settings.onComplete( { asset: this.video, netConnection: this.netConnection, netStream: this.netStream, extra: this.extra} );						// Clear References (the caller should have all the references they need now)			this.clear();		}		/**		 * Catches an Async Error associated with the NetStream		 * 		 * "Dispatched when an exception is thrown asynchronously — that is, from native asynchronous code. 		 * This event is dispatched when a server calls a method on the client that is not defined."		 * 		 * @param	e		 */		private function asyncErrorHandler(e:AsyncErrorEvent):void 		{ 			this.onError( e );		}		/**		 * Overrides the base loader's onComplete so that it no longer sends the URLLoader (which cannot connect with NetStream)		 * 		 * @param	e		 */		public override function onComplete(e:Event):void 		{			/*			This is actually a "video load complete" event... which is not useful as the video is loaded progressively. If the video is large and on			an external network, it could take a very long time to receive this event.						if(settings.onComplete != undefined)				settings.onComplete( { asset: this.video, netConnection: this.netConnection, netStream: this.netStream, extra: this.extra} );				*/        }		/**		* An Init Event occurs when the "properties and methods of a loaded SWF file are accessible"		*		* For more information, please read:		* http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/LoaderInfo.html#event:init        */		public function onInit( e:Event ):void		{           if(settings.onInit != undefined)				settings.onInit({event:e, extra:this.extra});        }		/**		* An unload event is dispatched when the loaderObj.unload() is called.		*		* For more information, please read:		* http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/LoaderInfo.html#event:unload        */		public function onUnload( e:Event ):void		{           if(settings.onUnload != undefined)				settings.onUnload({event:e, extra:this.extra});        }        public override function clear():void        {        	super.clear();        	        	netConnection= null;			netStream = null;			video = null;			videoURL = null;        }		public override function startListeners( dispatcher:IEventDispatcher ) :void 		{			super.startListeners( dispatcher );						// Custom			dispatcher.addEventListener(Event.INIT, 						onInit);			dispatcher.addEventListener(Event.UNLOAD, 						onUnload);		}		public override function stopListeners( dispatcher:IEventDispatcher ) :void 		{			super.stopListeners( dispatcher );						// Custom			dispatcher.removeEventListener(Event.INIT, 						onInit);			dispatcher.removeEventListener(Event.UNLOAD, 					onUnload);		}	}}